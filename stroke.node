<Comment>
Make a stroke.
This node has a 5ms delay.

<I/O>
input MidiPacket : MidiIN
input Int : Interval
input Int : StrokeDirection 0=up 1=down 2=updown
output MidiPacket : StrokeOut

<Description>
Make a guitar-like stroke.
This node has a 5 ms delay in note-on.
Other midi messages are real-time.

<Parameter>
parameter Interval = 50: interval (millisec)
parameter StrokeDirection = 0 : StrokeDirection 0=up 1=down 2=updown

<Setup>

<Code>
static Int interval = ${Interval};
static std::list<MidiPacket> noteList;
static Int strokeDirection = 0;

static auto outNote = [&](){
    if (noteList.empty()){
        return;
    }

    //低い順番でノートを出力
    out0 = noteList.front();
    //先頭の要素削除
    noteList.pop_front();
};

static auto strokeCb = [&](){
    if (noteList.empty()){
        return;
    }
    outNote();
};
static auto strokeEvent = Midiglue::make_cyclic_us_event<>(strokeCb);

static auto delayCb = [&](){
    strokeEvent->schedule(interval * 1000);
    outNote();
};
static auto delayEvent = Midiglue::make_oneshot_us_event<>(delayCb);

//インターバルを設定
if (@in1){
    interval = in1;
//midiパケットを受けたら　
}else if (@in0){
    if (in0.isNoteOn()){
        if (noteList.empty()){
            //ノートリストが空の場合5ミリ秒の間、midiパケットの入力を監視する。    
            noteList.push_back(in0);
            delayEvent->schedule(5 * 1000);
        } else {
            //ソートしながら挿入。
            //一番最後より高い音だった場合は、最後に挿入。
            if (noteList.back().getNoteNumber() <= in0.getNoteNumber()){
                noteList.push_back(in0);
            } else {
                //先頭から比較して、小さい場合、比較対象の前に挿入　!!このループでは、最後の要素より高い音の場合、挿入されない!!
                for(auto itr = noteList.begin(); itr != noteList.end(); ++itr) {
                    if ((*itr).getNoteNumber() > in0.getNoteNumber()){
                        noteList.insert(itr, in0);
                        break;
                    }
                }
            }
        }
    } else if (in0.isNoteOff()){
        noteList.clear();
        strokeEvent->cancel();
        out0 = in0;
    } else {
        out0 = in0;
    }
}

